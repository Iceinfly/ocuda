@model Ocuda.Promenade.Controllers.ViewModels.Locations.LocationDetailViewModel

@section metadata {
    <link rel="canonical" href="@Model.CanonicalUrl" />
}

<div class="prom-location">
    <div class="row">
        <div class="col-12 col-md-5 order-md-2">
            <img src="@Model.Location.ImagePath"
                 class="img-fluid pb-2" />
        </div>
        <div class="col-12 col-md-7 order-md-1">
            <h1>@Model.Location.Name</h1>
            <a aria-label="@Localizer[Promenade.NewWindowItem, @Localizer[Promenade.LocationSeeAMap]]"
               href="@Model.Location.MapLink"
               class="btn btn-outline-secondary float-end ms-2 prom-locations-maplink d-print-none"
               target="_blank">
                <span class="fas fa-map-marker-alt"></span> Map
            </a>
            <div class="sr-only">@Localizer[Promenade.LocationOurAddress]</div>
            <address>
                @Model.Location.Address
                <br />
                @Model.Location.City,
                @Model.Location.State
                @Model.Location.Zip
                <br />
                <a aria-label="@Localizer[Promenade.LocationCallUsAt, Model.Location.Phone]"
                   href="tel:@Model.Location.Phone">@Model.Location.Phone</a>
            </address>
            <div class="sr-only">@Localizer[Promenade.LocationCurrentHours]</div>
            @if (Model.Location.IsAlwaysOpen)
            {
                <p>@Localizer[Promenade.LocationOpen]</p>
            }
            else
            {
                <p>
                    @if (Model.HoursSegment != null)
                    {
                        @Html.Raw(Model.HoursSegment.Text)
                    }
                    else
                    {
                        @if (Model.Location.IsClosed)
                        {
                            <strong style="font-size: 1.2rem;"
                                    class="text-danger prom-locaton-isclosed">@Localizer[Promenade.LocationClosed]</strong>
                        }
                        else
                        {
                            @foreach (var dayGrouping in Model.Location.LocationHours)
                            {
                                <strong>@dayGrouping.Days</strong>
                                <span>@dayGrouping.Time</span>
                                <br />
                            }
                        }
                    }
                </p>
            }
        </div>
    </div>

    @if (Model.PreFeatureSegment != null)
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @if (!string.IsNullOrEmpty(Model.PreFeatureSegment?.Header))
                {
                    <h2>@Model.PreFeatureSegment.Header</h2>
                }
                @Html.Raw(Model.PreFeatureSegment.Text)
            </div>
        </div>
    }

    <h2>@Localizer[Promenade.LocationInformationHeader]</h2>

    @if (Model.Location.DescriptionSegment?.Text?.Length > 0)
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @Html.Raw(Model.Location.DescriptionSegment.Text)
            </div>
        </div>
    }

    <div class="row prom-features">
        @foreach (var feature in Model.LocationFeatures)
        {
            <div class="col-4 col-md-3 col-lg-2 mb-2">
                @if (string.IsNullOrEmpty(feature.RedirectUrl))
                {
                    <a asp-action="@nameof(LocationsController.Locations)"
                       asp-route-locationStub="@Model.Location.Stub"
                       asp-route-featureStub="@feature.Stub"
                       data-bs-toggle="modal"
                       data-bs-target="#featureModal"
                       target="@(feature.NewTab == true ? "_blank" : null)"
                       data-featureUrl="@Url.Action(nameof(LocationsController.FeatureInfo), LocationsController.Name, new { locationStub = Model.Location.Stub, featureStub = feature.Stub })"
                       data-name="@feature.Name">
                        <span class="fa-stack fa-2x d-block mx-auto">
                            <span class="fa fa-square fa-stack-2x"></span>
                            <span class="@feature.Icon"
                                  @(string.IsNullOrEmpty(feature.IconText) ? "" : "aria-hidden='true'")>
                                @Html.Raw(feature.IconText)
                            </span>
                        </span>
                        @feature.Name
                        @if (feature.NewTab == true)
                        {
                            <span class="sr-only">@Localizer[Promenade.NewWindow]</span>
                        }
                    </a>
                }
                else
                {
                    <a href="@feature.RedirectUrl" target="@(feature.NewTab == true ? "_blank" : null)">
                        <span class="fa-stack fa-2x d-block mx-auto">
                            <span class="fa fa-square fa-stack-2x"></span>
                            <span class="@feature.Icon"></span>
                        </span>
                        @feature.Name
                        @if (feature.NewTab.HasValue && feature.NewTab.Value == true)
                        {
                            <span class="sr-only">@Localizer[Promenade.NewWindow]</span>
                        }
                    </a>
                }
            </div>
        }
    </div>

    @if (Model.PostFeatureSegment != null)
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @if (!string.IsNullOrEmpty(Model.PostFeatureSegment?.Header))
                {
                    <h2>@Model.PostFeatureSegment.Header</h2>
                }
                @Html.Raw(Model.PostFeatureSegment.Text)
            </div>
        </div>
    }

    @if (Model.NearbyCount > 1)
    {
        <div class="prom-location-nearby">
            <h2>@Localizer[Promenade.LocationNearbyLocationsHeader]</h2>

            <p>
                @Localizer[Promenade.LocationInterestedInNearby]
                <a aria-label="@Localizer[Promenade.NewWindowItem, @Localizer[Promenade.LocationSubscribeNearby]]"
                   href="@Model.LocationNeighborGroup.SubscriptionUrl"
                   target="_blank">@Localizer[Promenade.LocationSubscribeNearby]</a>
            </p>

            <div class="row">
                <div class="col-md-6 col-lg-5">
                    <a href="@Model.LocationNeighborGroup.MapImage"
                       class="map-popup"
                       data-bs-toggle="modal"
                       data-bs-target="#mapModal"
                       target="_blank">
                        <img src="@Model.LocationNeighborGroup.MapImage"
                             class="d-block img-fluid mx-auto"
                             alt="@Model.LocationNeighborGroup.Description">
                    </a>
                </div>
                <div class="col-md-6 col-lg-7">
                    <table class="table table-sm">
                        @foreach (var locationGroup in Model.NearbyLocationGroups)
                        {
                            <tr>
                                <td>@locationGroup.DisplayOrder.</td>
                                <td colspan="@(locationGroup.Location.HasEvents ? 1 : 2)">
                                    <a asp-action="@nameof(LocationsController.Locations)"
                                       asp-route-locationStub="@locationGroup.Location.Stub">@locationGroup.Location.Name</a>
                                </td>
                                @if (locationGroup.Location.HasEvents)
                                {
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(locationGroup.Location.EventLink))
                                        {
                                            <a aria-label="@Localizer[Promenade.LocationSubscribeToName, locationGroup.Location.Name]"
                                               href="@locationGroup.Location.SubscriptionLink"
                                               class="btn btn-sm btn-outline-secondary text-dark m-1 float-end">
                                                <span class="far fa-envelope"></span>
                                                @Localizer[Promenade.ButtonSubscribe]
                                            </a>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(locationGroup.Location.SubscriptionLink))
                                        {
                                            <a aria-label="@Localizer[Promenade.LocationViewEventsName, locationGroup.Location.Name]"
                                               href="@locationGroup.Location.EventLink"
                                               class="btn btn-sm btn-outline-secondary text-dark m-1 float-end">
                                                <span class="fas fa-calendar-alt"></span>
                                                @Localizer[Promenade.LocationButtonEvents]
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                        <tr>
                            <td colspan="3">
                                <a href="@Model.LocationNeighborGroup.SubscriptionUrl"
                                   class="btn btn-sm btn-outline-secondary text-dark m-1 float-end"
                                   target="_blank">
                                    <span class="far fa-envelope"></span>
                                    @if (Model.NearbyCount == Model.NearbyEventsCount)
                                    {
                                        @Localizer[Promenade.LocationUpdatesFromAllCount, Model.NearbyEventsCount];
                                    }
                                    else
                                    {
                                        @Localizer[Promenade.LocationUpdatesFromCount, Model.NearbyEventsCount];
                                    }
                                    <span class="sr-only">@Localizer[Promenade.NewWindow]</span>
                                </a>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<div modal id="featureModal"></div>

@section Scripts {
    <script>
        $("#featureModal").on("show.bs.modal", function (event) {
            var button = $(event.relatedTarget);
            var featureUrl = button.data("featureurl");
            var name = button.data("name");

            var modal = $(this);
            modal.find(".modal-title").html(name);

            var modalBody = modal.find(".modal-body");
            modalBody.html("<span class=\"fas fa-spinner fa-2x fa-pulse\"></span>")

            $.getJSON(featureUrl,
                function (response) {
                    modalBody.html(response.bodyText).append(response.text);
                })
                .fail(function () {
                    window.location.href = button.attr("href");
                });
        });
    </script>

    <script type="application/ld+json">
        {
        "@@context": "http://schema.org",
        "@@type": "@Model.Location.Type",
        "name": "@Model.Location.Name",
        "areaServed": {
        "@@type": "@Model.Location.AreaServedType",
        "name": "@Model.Location.AreaServedName"
        },
        "email": "@Model.Location.Email",
        "address": {
        "@@id": "@Model.CanonicalUrl",
        "@@type": "@Model.Location.AddressType",
        "addressCountry": "@Model.Location.Country",
        "addressRegion": "@Model.Location.State",
        "addressLocality": "@Model.Location.City",
        "contactType": "@Model.Location.ContactType",
        "postalCode": "@Model.Location.Zip",
        "streetAddress": "@Model.Location.Address"
        },
        "location": { "@@id": "@Model.CanonicalUrl" },
        "parentOrganization": "@Model.Location.ParentOrganization",
        "telephone": "@Html.Raw(@Model.Location.Phone)",
        @if (!Model.Location.IsClosed && Model.HoursSegment == null)
        {
            @:"openingHours": @Html.Raw(Json.Serialize(@Model.StructuredLocationHours)),
        }
        @if (!string.IsNullOrEmpty(Model.Location.ImagePath))
        {
            @:"image": "@Model.Location.ImagePath",
        }
        "isAccessibleForFree": @Model.Location.IsAccessibleForFree.ToString().ToLowerInvariant(),
        @if (Model.Location.IsAccessibleForFree)
        {
            @:"priceRange" : "$000 - $000",
        }
        else
        {
            @:"priceRange" : "@Model.Location.PriceRange",
        }
        "sameAs": [
        "@Model.Location.MapLink"
        @if (!string.IsNullOrEmpty(Model.Location.Facebook))
        {
            @:, "@Model.Location.Facebook"
        }
        ]
        }
    </script>
}