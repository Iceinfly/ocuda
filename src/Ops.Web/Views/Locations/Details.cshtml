@using Ocuda.Ops.Controllers.ViewModels.Locations
@using Ocuda.Promenade.Models.Entities
@model DetailsViewModel

<div class="d-flex mb-2">
    <h1 class="flex-grow-1 text-start">
        Location
        <small class="text-muted">@Model.Location.Name</small>
    </h1>
    @if (Model.LocationManager)
    {
        @if (Model.SegmentEditor && !Model.Location.PreFeatureSegmentId.HasValue)
        {
            <form asp-action="@nameof(LocationsController.AddLocationNotice)" class="d-inline">
                <input type="hidden" name="stub" value="@Model.Location.Stub" />
                <button class="btn btn-outline-success ms-1">Add location notice</button>
            </form>
        }
        <div>
            <a class="btn btn-outline-success ms-1"
               asp-action="@nameof(LocationsController.AddFeature)"
               asp-route-slug="@Model.Location.Stub">Add Feature to Location</a>
        </div>
    }
    @if (Model.IsSiteManager)
    {
        <div>
            <a asp-area="@Ocuda.Ops.Controllers.Areas.SiteManagement.LocationsController.Area"
               asp-controller="@Ocuda.Ops.Controllers.Areas.SiteManagement.LocationsController.Name"
               asp-action="@nameof(Ocuda.Ops.Controllers.Areas.SiteManagement.LocationsController.Location)"
               asp-route-locationStub="@Model.Location.Stub"
               class="btn btn-outline-warning ms-2">
                Admin
            </a>
        </div>
    }
    <div>
        <a class="btn btn-outline-secondary ms-2"
           asp-action="@nameof(LocationsController.Index)">Back</a>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-2">
            <div class="card-header">Address</div>
            <div class="card-body">
                @Model.Location.Address<br />
                @Model.Location.City, @Model.Location.State @Model.Location.Zip<br />
                @Model.Location.Phone
            </div>
        </div>

        <div class="card mb-2">
            <div class="card-header">Description</div>
            <div class="card-body">
                <p class="card-text">@(Html.Raw(Model.Location.DescriptionSegment?.Text ?? "No description available."))</p>
            </div>
            <div class="card-footer d-flex">
                <div class="d-inline-block fa-fw @Model.LanguagesCssClass(Model.DescriptionLanguages) flex-grow-1 text-start"
                     style="font-size: 1.5rem;"
                     title="@DetailsViewModel.LanguagesTitle(Model.DescriptionLanguages)">
                    <span class="fa-solid fa-language fa-fw"></span>
                </div>
                @if (Model.LocationManager && Model.SegmentEditor)
                {
                    if (Model.Location.DescriptionSegmentId == default)
                    {
                        <div>
                            <form asp-action="@nameof(LocationsController.AddDescription)"
                                  class="d-inline"
                                  method="post">
                                <input type="hidden" name="stub" value="@Model.Location.Stub" />
                                <button class="btn btn-sm btn-outline-success">
                                    <span class="fa-solid fa-circle-plus fa-fw"></span>
                                </button>
                            </form>
                        </div>
                    }
                    else
                    {
                        <div>
                            <a class="btn btn-sm btn-outline-primary"
                               asp-action="@nameof(Ocuda.Ops.Controllers.Areas.SiteManagement.SegmentsController.Detail)"
                               asp-area="@Ocuda.Ops.Controllers.Areas.SiteManagement.SegmentsController.Area"
                               asp-controller="@Ocuda.Ops.Controllers.Areas.SiteManagement.SegmentsController.Name"
                               asp-route-id="@Model.Location.DescriptionSegmentId"
                               title="Edit description">
                                <span aria-hidden="true"
                                      class="fa-regular fa-file-lines fa-fw"></span>
                            </a>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="card mb-2">
            <div class="card-header">Map</div>
            <div class="card-body">
                <a asp-action="@nameof(LocationsController.MapImage)"
                   asp-route-slug="@Model.Location.Stub">
                    <img class="img-fluid"
                         src="@Url.Action(nameof(LocationsController.MapImage), new { slug = Model.Location.Stub })?@DetailsViewModel.Now">
                </a>
            </div>
            @if (Model.LocationManager)
            {
                <div class="card-footer d-flex justify-content-end">
                    <div>
                        <a class="btn btn-sm btn-outline-primary"
                           asp-action="@nameof(LocationsController.UpdateMapImage)"
                           asp-route-slug="@Model.Location.Stub">
                            <span class="fa-regular fa-file-lines fa-fw" aria-hidden="true"></span>
                        </a>
                    </div>
                </div>
            }
        </div>

        <div class="card mb-2">
            <div class="card-header">Exterior photo</div>
            <div class="card-body">
                <a asp-action="@nameof(LocationsController.ExteriorImage)"
                   asp-route-slug="@Model.Location.Stub">
                    <img class="img-fluid"
                         src="@Url.Action(nameof(LocationsController.ExteriorImage), new { slug = Model.Location.Stub })?@DetailsViewModel.Now">
                </a>
            </div>
            @if (Model.LocationManager)
            {
                <div class="card-footer d-flex justify-content-end">
                    <div>
                        <a class="btn btn-sm btn-outline-primary"
                           asp-action="@nameof(LocationsController.UpdateExteriorImage)"
                           asp-route-slug="@Model.Location.Stub">
                            <span class="fa-regular fa-file-lines fa-fw" aria-hidden="true"></span>
                        </a>
                    </div>
                </div>
            }
        </div>

        <div class="card mb-2">
            <div class="card-header">Interior photos</div>
            <div class="card-body">
                @if (Model.Location.InteriorImages?.Count > 0)
                {
                    @foreach (var interiorImage in Model.Location.InteriorImages)
                    {
                        <a asp-action="@nameof(LocationsController.InteriorImage)"
                           asp-route-id="@interiorImage.Id">
                            <img class="img-thumbnail" style="max-width: 200px; max-height: 200px;"
                                 src="@Url.Action(nameof(LocationsController.InteriorImage), new { id = interiorImage.Id })?@DetailsViewModel.Now">
                        </a>
                    }
                }
                else
                {
                    <em>No interior photos.</em>
                }
            </div>
            @if (Model.LocationManager)
            {
                <div class="card-footer d-flex justify-content-end">
                    <div>
                        <a class="btn btn-sm btn-outline-primary"
                           asp-action="@nameof(LocationsController.UpdateInteriorImages)"
                           asp-route-slug="@Model.Location.Stub">
                            <span class="fa-regular fa-file-lines fa-fw" aria-hidden="true"></span>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="col">
        @if (Model.Location.PreFeatureSegmentId.HasValue)
        {
            <div class="card @Model.ActiveLocationNoticeBorderCssClass mb-2">
                <div class="card-header d-flex">
                    <div class="flex-grow-1">Location Notice</div>
                    <div class="@Model.ActiveLocationNoticeCssClass">
                        @Model.LocationNoticeStatus
                    </div>
                </div>
                <div class="card-body">
                    <p class="card-text">@(Html.Raw(Model.Location.PreFeatureSegmentText?.Text ?? "<em>Location notice has no content.</em>"))</p>
                </div>
                <div class="card-footer d-flex">
                    <div class="flex-grow-1">
                        <div class="d-inline-block @Model.LanguagesCssClass(Model.LocationNoticeLanguages)"
                             style="font-size: 1.5rem;"
                             title="@DetailsViewModel.LanguagesTitle(Model.LocationNoticeLanguages)">
                            <span class="fa-solid fa-language fa-fw"></span>
                        </div>
                    </div>
                    @if (Model.LocationManager && Model.SegmentEditor)
                    {
                        <div>
                            <button class="btn btn-sm btn-outline-danger"
                                    data-bs-target="#deleteLocationNotice"
                                    data-bs-toggle="modal"
                                    type="button">
                                <span class="fa-solid fa-circle-minus fa-fw"></span>
                            </button>
                            <a class="btn btn-sm btn-outline-primary"
                               asp-action="@nameof(Ocuda.Ops.Controllers.Areas.SiteManagement.SegmentsController.Detail)"
                               asp-area="@Ocuda.Ops.Controllers.Areas.SiteManagement.SegmentsController.Area"
                               asp-controller="@Ocuda.Ops.Controllers.Areas.SiteManagement.SegmentsController.Name"
                               asp-route-id="@Model.Location.PreFeatureSegmentId"
                               title="Edit notice">
                                <span aria-hidden="true"
                                      class="fa-regular fa-file-lines fa-fw"></span>
                            </a>
                        </div>
                    }
                </div>
            </div>
        }

        @if (Model.Displays?.Any() == true)
        {
            <div class="card mb-2 border-primary">
                <div class="card-header text-primary-emphasis">
                    Digital displays <em>(in the library)</em>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var display in Model.Displays)
                    {
                        <li class="list-group-item d-flex">
                            <div class="flex-grow-1">
                                @display.Name
                                @if (!string.IsNullOrEmpty(display.LocationDescription))
                                {
                                    @:/ @display.LocationDescription
                                }
                                (@display.SlideCount assets)
                            </div>
                            <div>
                                <a class="btn btn-sm btn-outline-primary"
                                   asp-area="@Ocuda.Ops.Controllers.Areas.ContentManagement.DigitalDisplaysController.Area"
                                   asp-action="@nameof(Ocuda.Ops.Controllers.Areas.ContentManagement.DigitalDisplaysController.DisplayAssets)"
                                   asp-controller="@Ocuda.Ops.Controllers.Areas.ContentManagement.DigitalDisplaysController.Name"
                                   asp-route-displayId="@display.Id"
                                   title="View digital display">
                                    <span class="fa-solid fa-tv fa-fw" aria-hidden="true"></span>
                                </a>

                            </div>
                        </li>
                    }
                </ul>
            </div>
        }

        @if (Model.VolunteerForms != null)
        {
            <div class="card mb-2">
                <div class="card-header">Volunteer Forms</div>
                <ul class="list-group list-group-flush">
                    @foreach (var form in Model.VolunteerForms)
                    {
                        <li class="list-group-item d-flex align-items-center @((form.FormMappings?.Count ?? 0) > 0 ? "" : "fst-italic")">
                            <div class="flex-grow-1">
                                <label>
                                    @form.TypeName (@(form.FormMappings?.Count ?? 0))
                                </label>
                            </div>
                            <div class="me-2">
                                <button type="button"
                                        class="btn btn-sm btn-outline-success"
                                        data-bs-toggle="modal"
                                        data-bs-target="#addStaffModal"
                                        data-formtype="@((VolunteerFormType)form.TypeId)"
                                        data-formtypeid="@form.TypeId">
                                    <span class="fa-solid fa-circle-plus fa-fw"
                                          aria-hidden="true"></span>
                                </button>
                            </div>
                        </li>
                        @if (!form.IsDisabled)
                        {
                            @if (form.FormMappings?.Count > 0)
                            {
                                @foreach (var formMapping in form.FormMappings)
                                {
                                    <li class="list-group-item d-flex align-items-center">
                                        <div class="me-2">
                                            <form asp-action="@nameof(Ocuda.Ops.Controllers.LocationsController.RemoveFormUserMapping)"
                                                  asp-controller="@Ocuda.Ops.Controllers.LocationsController.Name"
                                                  asp-route-slug="@Model.Location.Stub"
                                                  asp-route-type="@form.TypeId"
                                                  asp-route-userId="@formMapping.UserId"
                                                  class="d-inline"
                                                  method="post"
                                                  role="form">
                                                <button button-spinner
                                                        class="btn btn-sm btn-outline-danger"
                                                        type="submit">
                                                    <span class="fa-solid fa-circle-minus fa-fw"></span>
                                                </button>
                                            </form>
                                        </div>
                                        <div class="flex-grow-1">
                                            @formMapping.Name
                                        </div>
                                    </li>
                                }
                            }
                        }
                        else
                        {
                            <li>
                                <div class="alert alert-warning">
                                    @form.AlertWarning
                                </div>
                            </li>
                        }
                        <div modal
                             id="addStaffModal"
                             name="Staff Member"
                             type="Ocuda.Utility.TagHelpers.ModalTypes.Add"
                             suppress-footer="true"
                             data-backdrop="static">
                            <input type="hidden" asp-for="@form.TypeId" />
                            <div class="form-group mb-3">
                                <label for="staffSearchText">Search</label>
                                <div class="input-group">
                                    <input type="text"
                                           id="staffSearchText"
                                           class="form-control"
                                           aria-label="Search text" />
                                    <button class="btn btn-outline-success"
                                            id="staffSearchGo"
                                            button-spinner
                                            type="submit">
                                        Go
                                    </button>
                                </div>
                            </div>
                            <div id="searchResults"></div>
                            <div id="pagination" class="d-none mt-3"></div>
                        </div>
                    }
                </ul>
            </div>
        }

        <div class="card mb-2">
            <div class="card-header">At this location</div>
            <ul class="list-group list-group-flush">
                @foreach (var feature in Model.AtThisLocation)
                {
                    <li class="list-group-item d-flex align-items-center">
                        @if (Model.LocationManager)
                        {
                            <div class="me-2">
                                <form asp-action="@nameof(LocationsController.RemoveFeature)"
                                      class="d-inline">
                                    <input type="hidden" name="slug" value="@Model.Location.Stub" />
                                    <input type="hidden" name="featureId" value="@feature.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-danger">
                                        <span aria-hidden="true"
                                              class="fa-solid fa-circle-minus fa-fw"></span>
                                    </button>
                                </form>
                                <a class="btn btn-sm btn-outline-primary"
                                   asp-action="@nameof(LocationsController.LocationFeature)"
                                   asp-route-slug="@Model.Location.Stub"
                                   asp-route-featureId="@feature.Id"
                                   title="Edit location feature">
                                    <span aria-hidden="true"
                                          class="fa-regular fa-file-lines fa-fw"></span>
                                </a>
                            </div>
                        }
                        <div class="flex-grow-1">@feature.Name</div>
                    </li>
                }
            </ul>
        </div>
        <div class="card mb-2">
            <div class="card-header">Services available</div>
            <ul class="list-group list-group-flush">
                @foreach (var feature in Model.ServicesAvailable)
                {
                    <li class="list-group-item d-flex align-items-center">
                        @if (Model.LocationManager)
                        {
                            <div class="me-2">
                                <form asp-action="@nameof(LocationsController.RemoveFeature)"
                                      class="d-inline">
                                    <input type="hidden" name="slug" value="@Model.Location.Stub" />
                                    <input type="hidden" name="featureId" value="@feature.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-danger">
                                        <span aria-hidden="true"
                                              class="fa-solid fa-circle-minus fa-fw"></span>
                                    </button>
                                </form>
                                <a class="btn btn-sm btn-outline-primary"
                                   asp-action="@nameof(LocationsController.LocationFeature)"
                                   asp-route-slug="@Model.Location.Stub"
                                   asp-route-featureId="@feature.Id"
                                   title="Edit location feature">
                                    <span aria-hidden="true"
                                          class="fa-regular fa-file-lines fa-fw"></span>
                                </a>
                            </div>
                        }
                        <div class="flex-grow-1">@feature.Name</div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@if (Model.LocationManager && Model.SegmentEditor)
{
    <form asp-action="@nameof(LocationsController.RemoveLocationNotice)">
        <input type="hidden" name="Id" value="@Model.Location.Id" />
        <div aria-hidden="true"
             aria-labelledby="deleteLocationNoticeLabel"
             class="modal fade"
             data-bs-backdrop="static"
             data-bs-keyboard="false"
             id="deleteLocationNotice"
             tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5"
                            id="deleteLocationNoticeLabel">
                            Delete location notice
                        </h1>
                        <button aria-label="Close"
                                class="btn-close"
                                data-bs-dismiss="modal"
                                type="button"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this location notice?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-secondary"
                                data-bs-dismiss="modal"
                                type="button">
                            Close
                        </button>
                        <button class="btn btn-outline-danger" type="submit">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
}

@section Scripts {
    <script>
        const mapCoordinatorUrl = new URL('@Url.Action(nameof(LocationsController.MapVolunteerCoordinator), LocationsController.Name, new { slug = Model.Location.Stub }, protocol: Context.Request.Scheme)');
        const staffSearchUrl = new URL('@Url.Action(nameof(StaffController.SearchJson), StaffController.Name, null, protocol: Context.Request.Scheme)');

        document.getElementById('addStaffModal').addEventListener('show.bs.modal', (event) => {
            currentFormTypeId = event.relatedTarget.dataset.formtypeid;
            document.getElementById('addStaffModalLabel').innerHTML = `Add staff member - ${event.relatedTarget.dataset.formtype} Volunteer form`;
            currentPage = 1;
            document.getElementById('searchResults').innerHTML = '';
            document.getElementById('pagination').classList.add('d-none');
            document.getElementById("staffSearchText").value = '';
        });

        document.getElementById("staffSearchText").addEventListener('keyup', (e) => {
            if(e.key == 'Enter' || e.keyCode == 13) {
                document.getElementById('staffSearchGo').click();
            }
        });

        document.getElementById("staffSearchGo").addEventListener('click', () => {
            currentPage = 1;
            volunteerMappingSearch();
        });

        async function volunteerMappingSearch() {
            await performStaffSearch(document.getElementById("staffSearchText").value, currentPage)
                .then((response) => {
                    return response.json();
                }).then((data) => {
                    if (data && data.itemCount > 0) {
                        document.getElementById('searchResults').innerHTML = '';
                        currentPage = data.currentPage;
                        $.each(data.users, function (index, value) {
                            const params = new URLSearchParams(mapCoordinatorUrl.search);
                            params.append('type', currentFormTypeId);
                            params.append('userId', value.id);

                            const formDiv = document.createElement('div');
                            formDiv.classList.add('me-2');

                            const form = document.createElement('form');
                            form.setAttribute('method', 'POST');
                            form.setAttribute('action',
                                new URL(`${mapCoordinatorUrl.origin}${mapCoordinatorUrl.pathname}?${params}`));

                            const submitButton = document.createElement('button');
                            submitButton.classList.add('btn', 'btn-sm', 'btn-outline-success');
                            submitButton.setAttribute('type', 'submit');

                            const span = document.createElement('span');
                            span.classList.add('fa-solid', 'fa-circle-plus', 'fa-fw');

                            submitButton.appendChild(span);
                            form.appendChild(submitButton);
                            formDiv.appendChild(form);

                            const nameDiv = document.createElement('div');
                            nameDiv.classList.add('flex-grow-1');
                            nameDiv.textContent = value.name

                            const row = document.createElement('div');
                            row.classList.add('d-flex', 'align-content-center', 'my-2');
                            row.appendChild(formDiv);
                            row.appendChild(nameDiv);
                            document.getElementById('searchResults').append(row);
                        })
                        const paginationContent = [];
                        if (data.maxPage > 1) {
                            if (data.currentPage == 1) {
                                paginationContent.push('<button class="btn btn-sm btn-outline-primary" disabled>');
                                paginationContent.push('<span class="fa fa-fw fa-backward"></span></button>');
                            } else {
                                paginationContent.push('<button class="btn btn-sm btn-outline-primary"');
                                paginationContent.push(' onclick="prevPage(' + false + ');">');
                                paginationContent.push('<span class="fa fa-fw fa-backward"></span></button>');
                            }
                            paginationContent.push('<span class="d-inline-block mx-2">')
                            paginationContent.push(data.currentPage + '/' + data.maxPage);
                            paginationContent.push('</span>')
                            if (data.currentPage == data.maxPage) {
                                paginationContent.push('<button class="btn btn-sm btn-outline-primary" disabled>');
                                paginationContent.push('<span class="fa fa-fw fa-forward"></span></button>');
                            } else {
                                paginationContent.push('<button class="btn btn-sm btn-outline-primary"');
                                paginationContent.push(' onclick="nextPage(' + false + ');">')
                                paginationContent.push('<span class="fa fa-fw fa-forward"></span></button>');
                            }
                        }

                        if (paginationContent.length > 0) {
                            document.getElementById('pagination').classList.remove('d-none');
                        }
                        else {
                            document.getElementById('pagination').classList.add('d-none');
                        }
                        document.getElementById('pagination').innerHTML = paginationContent.join('');
                    } else {
                        document.getElementById('searchResults').innerHTML = '<em>No staff members found.</em>';
                        document.getElementById('pagination').classList.add('d-none');
                    }
                }).catch((error) => {
                    console.log(error)
                    alert("Staff lookup failed.");
                }).then(() => {
                    ResetSpinners();
                });
        }

        async function performStaffSearch(searchText, page) {
            const params = new URLSearchParams(staffSearchUrl.search);
            params.append('searchText', searchText);
            params.append('page', page);

            return fetch(new URL(`${staffSearchUrl.origin}${staffSearchUrl.pathname}?${params}`),
                {method: 'GET'});
        }

        function nextPage() {
            currentPage++;
            volunteerMappingSearch();
        }

        function prevPage() {
            currentPage = Math.max(1, currentPage - 1);
            volunteerMappingSearch();
        }
    </script>
}