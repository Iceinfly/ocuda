@model Ocuda.Ops.Controllers.Areas.SiteManagement.ViewModels.Segment.DetailViewModel

@section styles {
    <link rel="stylesheet" href="~/css/md.min.css" asp-append-version="true" />
}

<div class="d-flex justify-content-between mb-2">
    <h1>
        Segment
        @if (!string.IsNullOrEmpty(Model.SegmentName))
        {
            <small class="text-muted">@Model.SegmentName</small>
        }
    </h1>
    <div class="pt-2">
        @if (!Model.NewSegmentText && string.IsNullOrEmpty(Model.BackLink))
        {
            <button type="button"
                    class="btn btn-outline-danger"
                    data-bs-toggle="modal"
                    data-bs-target="#deleteModal"
                    data-segmentId="@Model.SegmentId"
                    data-languageId="@Model.LanguageId"
                    data-languageDescription="@Model.LanguageDescription">
                <span class="fa-solid fa-circle-minus"></span>
                Delete Segment
            </button>
        }
        @if (!string.IsNullOrEmpty(Model.BackLink))
        {
            <a href="@Model.BackLink" class="btn btn-outline-dark">Back</a>
        }
        else
        {
            <a asp-action="Index" class="btn btn-outline-dark">Cancel</a>
        }
    </div>
</div>

<form asp-controller="@SegmentsController.Name"
      asp-action="@(nameof(SegmentsController.DeleteText))"
      method="post"
      role="form">
    <input id="deleteSegmentId" asp-for="SegmentId" type="hidden" />
    <input id="deleteLanguageId" asp-for="LanguageId" type="hidden" />
    <div modal
         id="deleteModal"
         name="Segment"
         type="Ocuda.Utility.TagHelpers.ModalTypes.Delete"></div>
</form>

@if (!string.IsNullOrEmpty(Model.Relationship))
{
    <div class="row my-3">
        <div class="col-12 col-md-3 text-end">Relationship(s)</div>
        <div class="col-12 col-md-9">@Model.Relationship</div>
    </div>
}

<form asp-action="@nameof(SegmentsController.Detail)" method="post" role="form">
    <input asp-for="SegmentId" type="hidden" />
    <input asp-for="LanguageId" type="hidden" />
    <div class="row mb-2">
        <div class="col-12">
            <span class="d-none"><input asp-for="SegmentName" formgroup readonly /></span>
        </div>
    </div>
    @if (Model.CanBeDeactivated)
    {
        <select asp-for="IsActive" formgroup>
            <option value="true">Active</option>
            <option value="false">Disabled</option>
        </select>
    }
    else
    {
        <input type="hidden" asp-for="IsActive" value="true" />
    }
    <div class="row">
        <div class="col-12">
            @if (Model.CanBeScheduled)
            {
                <input asp-for="SegmentStartDate" formgroup type="datetime-local" />
                <input asp-for="SegmentEndDate" formgroup type="datetime-local" />
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <select asp-for="SegmentWrapId" asp-items="Model.SegmentWrapList" formgroup></select>
            @if (!string.IsNullOrEmpty(Model.FlagWrap))
            {
                <div class="row">
                    <div class="col-md-9 offset-md-3">
                        <div class="alert alert-info px-2 py-1 mb-3">
                            <span class="fa-solid fa-circle-info fa-fw"></span>
                            @Model.FlagWrap
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    @if (Model.LanguageList?.Count() > 1)
    {
        <div class="row mb-2">
            <div class="col-md-3 text-md-end">
                <label asp-for="SelectedLanguage" class="col-form-label"></label>
            </div>
            <div class="col-md-9">
                @foreach (var item in Model.LanguageList.Where(_ => !_.Disabled))
                {
                    <a asp-action="@nameof(SegmentsController.Detail)"
                       asp-route-id="@Model.SegmentId"
                       asp-route-language="@item.Value"
                       class="btn btn-sm btn-outline-info mt-1 @(item.Selected ? "active" : null)">
                        @item.Text
                    </a>
                }
            </div>
            <div class="d-none oc-save-warning offset-md-3 col-md-9 mt-2">
                <div class="alert alert-warning py-2">
                    <span class="fa-solid fa-circle-arrow-up"></span>
                    Unsaved changes will be lost if you change languages.
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.AutomatedHeaderMarkup))
    {
        <div class="mb-3 row">
            <div class="col-md-3 text-md-end">
                <label asp-for="AutomatedHeaderMarkup" class="col-form-label"></label>
            </div>
            <div class="col-md-9" style="padding-top: 0.4rem;">
                @Html.Raw(Model.AutomatedHeaderMarkup)
            </div>
        </div>
    }
    else
    {
        if (Model.SuppressHeader)
        {
            <input asp-for="SegmentText.Header" type="hidden" value="" />
        }
        else
        {
            <input asp-for="SegmentText.Header" formgroup />
        }
    }

    <div class="mb-3 row border-top border-bottom">
        <div class="mb-3-inner col-12 p-3">
            <textarea asp-for="SegmentText.Text" markdown-editor></textarea>
            <span asp-validation-for="SegmentText.Text"
                  class="validation-message text-danger fw-bold"></span>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="text-end mb-2">
                <button type="submit"
                        class="btn btn-lg btn-outline-success"
                        buttonspinner>
                    Save
                </button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col d-flex">
            <div class="d-none oc-save-warning flex-fill text-start">
                <div class="alert alert-warning mb-0">
                    <span class="fa-solid fa-triangle-exclamation"></span>
                    You have unsaved changes.
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts {
    <script src="~/js/md.min.js" asp-append-version="true"></script>
    <script>
        const editorAllowCode = "@Json.Serialize(!Model.IsShowNotes)";
        const editorAllowHr = "@Json.Serialize(!Model.IsShowNotes)";

        function showSaveWarning() {
            document.querySelectorAll('.oc-save-warning').forEach(_ => {
                _.classList.remove('d-none');
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            let editor = new Markdown.Editor($("#SegmentText_Text"), {
                allowUploads: false,
                allowImages: false,
                allowCode: editorAllowCode,
                allowHR: editorAllowHr
            });
            if (editor) {
                editor.run();
            }
        });

        document.getElementById('SegmentText_Text').addEventListener('keydown', showSaveWarning);
        document.getElementById('SegmentText_Header').addEventListener('keydown', showSaveWarning);

        document.getElementById('deleteModal').addEventListener('show.bs.modal', e => {
            e.target.querySelectorAll('.modal-text').forEach(_ => {
                _.innerHTML = "Are you sure you want to delete the <strong>"
                    + e.relatedTarget.dataset.languagedescription
                    + "</strong> text for this segment?";
            })
        });
    </script>
}
